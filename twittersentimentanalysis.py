# -*- coding: utf-8 -*-
"""TwitterSentimentAnalysis

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i-afabNMIU51TLEwBOhWCLSTgr_bLIpJ
"""



import sklearn
import numpy as np
import pandas as pd

train = pd.read_csv("/content/train.csv")
test = pd.read_csv("/content/test.csv")

train.head(10)

test.tail(10)

sum(train["label"] == 0)

sum(train["label"] == 1)

#@title
train.isnull().sum()

!pip install tweet-preprocessor

import re

REPLACE_NO_SPACE = re.compile("(\.)|(\;)|(\:)|(\!)|(\')|(\?)|(\,)|(\")|(\|)|(\()|(\))|(\[)|(\])|(\%)|(\$)|(\>)|(\<)|(\{)|(\})")
REPLACE_WITH_SPACE = re.compile("(<br\s/><br\s/?)|(-)|(/)|(:).")

import preprocessor as p

def clean_tweets(df):
  tempArr = []
  for line in df:
    # send to tweet_processor
    tmpL = p.clean(line)
    # remove puctuation
    tmpL = REPLACE_NO_SPACE.sub("", tmpL.lower()) # convert all tweets to lower cases
    tmpL = REPLACE_WITH_SPACE.sub(" ", tmpL)
    tempArr.append(tmpL)
  return tempArr

train_tweet = clean_tweets(train["tweet"])
train_tweet = pd.DataFrame(train_tweet)

train["clean_tweet"] = train_tweet

train.head(10)

test_tweet = clean_tweets(test["tweet"])
test_tweet = pd.DataFrame(test_tweet)

test["clean_tweet"] = test_tweet
test.tail()

from sklearn.model_selection import train_test_split

y = train.label.values
x_train, x_test, y_train, y_test = train_test_split(train.clean_tweet.values, y, stratify=y, random_state=1, test_size=0.3, shuffle=True)

from sklearn.feature_extraction.text import CountVectorizer

documents = ["This is Import Data's Youtube channel",
             "Data science is my passion and it is fun!",
             "Please subscribe to my channel"]

vectorizer = CountVectorizer()
document_term_matrix = vectorizer.fit_transform(documents)

pd.DataFrame(document_term_matrix.toarray(), columns = vectorizer.get_feature_names())

from sklearn.feature_extraction.text import CountVectorizer

vectorizer = CountVectorizer(binary = True, stop_words='english')

vectorizer.fit(list(x_train) + list(x_test))

x_train_vec = vectorizer.transform(x_train)
x_test_vec = vectorizer.transform(x_test)

from sklearn import svm

svm = svm.SVC(kernel = 'linear', probability=True)

prob = svm.fit(x_train_vec, y_train).predict_proba(x_test_vec)

y_pred_svm = svm.predict(x_test_vec)
print(y_pred_svm)

from sklearn.metrics import accuracy_score
print("Accuracy score for SVC is: ", accuracy_score(y_test, y_pred_svm) * 100, '%')

