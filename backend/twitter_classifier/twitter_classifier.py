# -*- coding: utf-8 -*-
"""TwitterSentimentAnalysis
Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i-afabNMIU51TLEwBOhWCLSTgr_bLIpJ
"""

import sklearn
import numpy as np
import pandas as pd
import re
import preprocessor as p
import pickle
from sklearn import svm
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_extraction.text import CountVectorizer

train = pd.read_csv("./train_data/train.csv")
test = pd.read_csv("./train_data/test.csv")

train.isnull().sum()

REPLACE_NO_SPACE = re.compile("(\.)|(\;)|(\:)|(\!)|(\')|(\?)|(\,)|(\")|(\|)|(\()|(\))|(\[)|(\])|(\%)|(\$)|(\>)|(\<)|(\{)|(\})")
REPLACE_WITH_SPACE = re.compile("(<br\s/><br\s/?)|(-)|(/)|(:).")

def clean_tweets(df):
  tempArr = []
  for line in df:
    # send to tweet_processor
    tmpL = p.clean(line)
    # remove puctuation
    tmpL = REPLACE_NO_SPACE.sub("", tmpL.lower()) # convert all tweets to lower cases
    tmpL = REPLACE_WITH_SPACE.sub(" ", tmpL)
    tempArr.append(tmpL)
  return tempArr

train_tweet = clean_tweets(train["tweet"])
train_tweet = pd.DataFrame(train_tweet)

train["clean_tweet"] = train_tweet

test_tweet = clean_tweets(test["tweet"])
test_tweet = pd.DataFrame(test_tweet)

test["clean_tweet"] = test_tweet

y = train.label.values
x_train, x_test, y_train, y_test = train_test_split(train.clean_tweet.values, y, stratify=y, random_state=1, test_size=0.3, shuffle=True)

vectorizer = CountVectorizer(binary = True, stop_words='english')

vectorizer.fit(list(x_train) + list(x_test))
#transform documents to document's name matrix
x_train_vec = vectorizer.transform(x_train)
x_test_vec = vectorizer.transform(x_test)
#ML support vector classifier as binary classifier
svm = svm.SVC(kernel = 'linear', probability=True)
# fit the SVC model based on the given training data
prob = svm.fit(x_train_vec, y_train).predict_proba(x_test_vec)
# perform classification and prediction on samples in x_test
y_pred_svm = svm.predict(x_test_vec)

print(y_pred_svm)

print("Accuracy score for SVC is: ", accuracy_score(y_test, y_pred_svm) * 100, '%')

with open('vectorizer.pkl', 'wb') as pickle_file:
  pickle.dump(vectorizer, pickle_file)

with open('model.pkl', 'wb') as pickle_file:
  pickle.dump(svm, pickle_file)